PTAH MIGRATION LIBRARY INTEGRATION TEST REPORT
===============================================

Generated: 2025-08-08 08:10:26
Test Period: 08:08:57 - 08:10:26
Duration: 1m29.199s

SUMMARY
-------
Executed 141 tests in 1m29.199s. 134 passed, 7 failed (95.0% success rate)

STATISTICS
----------
Total Tests: 141
Passed: 134
Failed: 7
Success Rate: 95.0%

DETAILED RESULTS
----------------
✅ PASS apply_incremental_migrations_postgres (postgres) - 425ms
    Description: Apply multiple sequential migrations to a fresh database

✅ PASS rollback_migrations_postgres (postgres) - 311ms
    Description: Roll back migrations in reverse order

✅ PASS upgrade_to_specific_version_postgres (postgres) - 265ms
    Description: Apply migrations up to a defined version

✅ PASS check_current_version_postgres (postgres) - 140ms
    Description: Query current migration version

✅ PASS generate_desired_schema_postgres (postgres) - 402ms
    Description: Extract expected schema from entity definitions

✅ PASS read_actual_db_schema_postgres (postgres) - 263ms
    Description: Introspect current schema from the database

✅ PASS dry_run_support_postgres (postgres) - 319ms
    Description: Simulate migrations without executing SQL

✅ PASS operation_planning_postgres (postgres) - 81ms
    Description: Generate detailed plan of operations

✅ PASS schema_diff_postgres (postgres) - 636ms
    Description: Compare DB schema with entity definitions

✅ PASS failure_diagnostics_postgres (postgres) - 126ms
    Description: Simulate a failing migration and capture error

✅ PASS idempotency_reapply_postgres (postgres) - 213ms
    Description: Re-apply already applied migrations

✅ PASS idempotency_up_to_date_postgres (postgres) - 210ms
    Description: Run migrate up when database is already up-to-date

✅ PASS concurrency_parallel_migrate_postgres (postgres) - 229ms
    Description: Launch two migrate up processes in parallel

✅ PASS partial_failure_recovery_postgres (postgres) - 227ms
    Description: Handle multi-step migration with intentional failure

✅ PASS timestamp_verification_postgres (postgres) - 195ms
    Description: Check that applied_at timestamps are stored correctly

✅ PASS manual_patch_detection_postgres (postgres) - 267ms
    Description: Detect manual schema changes via schema diff

✅ PASS permission_restrictions_postgres (postgres) - 58ms
    Description: Test with read-only privileges

✅ PASS migration_generator_validation_postgres (postgres) - 935ms
    Description: Validate migration generator with forward and rollback migrations

✅ PASS cleanup_support_postgres (postgres) - 494ms
    Description: Test drop and re-run from empty state

✅ PASS dynamic_basic_evolution_postgres (postgres) - 1.387s
    Description: Test basic schema evolution using versioned entities: 000 → 013 (all versions)

✅ PASS dynamic_skip_versions_postgres (postgres) - 390ms
    Description: Test non-sequential migration: 000 → 002 → 003

✅ PASS dynamic_idempotency_postgres (postgres) - 196ms
    Description: Test applying the same version multiple times

✅ PASS dynamic_partial_apply_postgres (postgres) - 397ms
    Description: Test applying to specific version, then continuing

✅ PASS dynamic_schema_diff_postgres (postgres) - 208ms
    Description: Test schema diff generation between versions

✅ PASS dynamic_migration_sql_generation_postgres (postgres) - 78ms
    Description: Test SQL migration generation from entity changes

✅ PASS dynamic_rollback_single_postgres (postgres) - 164ms
    Description: Test rolling back one version (003 → 002)

✅ PASS dynamic_rollback_multiple_postgres (postgres) - 238ms
    Description: Test rolling back multiple versions (005 → 001)

✅ PASS dynamic_rollback_to_zero_postgres (postgres) - 197ms
    Description: Test complete rollback to empty database

✅ PASS dynamic_partial_failure_recovery_postgres (postgres) - 273ms
    Description: Test recovery from migration failure mid-way

✅ PASS dynamic_invalid_migration_postgres (postgres) - 132ms
    Description: Test handling of invalid/corrupted migration data

✅ PASS dynamic_concurrent_migrations_postgres (postgres) - 180ms
    Description: Test concurrent migration attempts (locking behavior)

✅ PASS dynamic_circular_dependencies_postgres (postgres) - 161ms
    Description: Test handling of circular foreign key dependencies

✅ PASS dynamic_data_migration_postgres (postgres) - 100ms
    Description: Test migrations that require data transformation

✅ PASS dynamic_large_table_migration_postgres (postgres) - 423ms
    Description: Test performance with large datasets during migration

✅ PASS dynamic_empty_migrations_postgres (postgres) - 314ms
    Description: Test versions with no actual schema changes

✅ PASS dynamic_duplicate_names_postgres (postgres) - 116ms
    Description: Test handling of duplicate table/field names across versions

✅ PASS dynamic_reserved_keywords_postgres (postgres) - 154ms
    Description: Test migrations involving SQL reserved keywords

✅ PASS dynamic_dialect_differences_postgres (postgres) - 129ms
    Description: Test same migration across PostgreSQL/MySQL/MariaDB

✅ PASS dynamic_type_mapping_postgres (postgres) - 130ms
    Description: Test database-specific type conversions

✅ PASS dynamic_constraint_validation_postgres (postgres) - 118ms
    Description: Test constraint violations during migration

✅ PASS dynamic_foreign_key_cascade_postgres (postgres) - 225ms
    Description: Test cascading effects of table/field drops

✅ PASS dynamic_embedded_fields_postgres (postgres) - 378ms
    Description: Test embedded struct fields (both value and pointer types) in CREATE TABLE migrations

❌ FAIL dynamic_rls_functions_basic_postgres (postgres) - 162ms
    Description: Test PostgreSQL RLS and custom functions: basic multi-tenant setup
    Error: failed to migrate to 014-rls-functions: failed to apply migration 1: failed to execute SQL statement: pq: syntax error at or near "FOREIGN"
SQL: CREATE TABLE products (
  name VARCHAR(255) NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  created_at TIMESTAMP,
  id SERIAL PRIMARY KEY NOT NULL,
  tenant_id TEXT NOT NULL,
  description TEXT,
  user_id INTEGER NOT NULL,
  CONSTRAINT  FOREIGN KEY (user_id) REFERENCES users(id)
)

❌ FAIL dynamic_rls_functions_advanced_postgres (postgres) - 124ms
    Description: Test PostgreSQL RLS and custom functions: advanced role-based policies
    Error: failed to migrate to 015-rls-advanced: failed to apply migration 1: failed to execute SQL statement: pq: syntax error at or near "FOREIGN"
SQL: CREATE TABLE products (
  description TEXT,
  user_id INTEGER NOT NULL,
  created_at TIMESTAMP,
  tenant_id TEXT NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  status VARCHAR(20) NOT NULL DEFAULT 'active',
  updated_at TIMESTAMP,
  id SERIAL PRIMARY KEY NOT NULL,
  name VARCHAR(255) NOT NULL,
  CONSTRAINT  FOREIGN KEY (user_id) REFERENCES users(id)
)

❌ FAIL dynamic_rls_cross_database_postgres (postgres) - 134ms
    Description: Test PostgreSQL RLS features are skipped gracefully on MySQL/MariaDB
    Error: failed to migrate to 014-rls-functions: failed to apply migration 1: failed to execute SQL statement: pq: syntax error at or near "FOREIGN"
SQL: CREATE TABLE products (
  name VARCHAR(255) NOT NULL,
  description TEXT,
  price DECIMAL(10,2) NOT NULL,
  user_id INTEGER NOT NULL,
  created_at TIMESTAMP,
  id SERIAL PRIMARY KEY NOT NULL,
  tenant_id TEXT NOT NULL,
  CONSTRAINT  FOREIGN KEY (user_id) REFERENCES users(id)
)

❌ FAIL dynamic_functions_modification_postgres (postgres) - 134ms
    Description: Test PostgreSQL function modification and schema diffing
    Error: failed to apply migration 1: failed to execute SQL statement: pq: syntax error at or near "FOREIGN"
SQL: CREATE TABLE products (
  tenant_id TEXT NOT NULL,
  name VARCHAR(255) NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  created_at TIMESTAMP,
  id SERIAL PRIMARY KEY NOT NULL,
  description TEXT,
  user_id INTEGER NOT NULL,
  CONSTRAINT  FOREIGN KEY (user_id) REFERENCES users(id)
)

❌ FAIL dynamic_rls_policy_modification_postgres (postgres) - 125ms
    Description: Test RLS policy modification and schema diffing
    Error: failed to apply migration 1: failed to execute SQL statement: pq: syntax error at or near "FOREIGN"
SQL: CREATE TABLE products (
  id SERIAL PRIMARY KEY NOT NULL,
  tenant_id TEXT NOT NULL,
  description TEXT,
  price DECIMAL(10,2) NOT NULL,
  user_id INTEGER NOT NULL,
  created_at TIMESTAMP,
  name VARCHAR(255) NOT NULL,
  CONSTRAINT  FOREIGN KEY (user_id) REFERENCES users(id)
)

✅ PASS apply_incremental_migrations_mysql (mysql) - 1.112s
    Description: Apply multiple sequential migrations to a fresh database

✅ PASS rollback_migrations_mysql (mysql) - 1.195s
    Description: Roll back migrations in reverse order

✅ PASS upgrade_to_specific_version_mysql (mysql) - 609ms
    Description: Apply migrations up to a defined version

✅ PASS check_current_version_mysql (mysql) - 452ms
    Description: Query current migration version

✅ PASS generate_desired_schema_mysql (mysql) - 413ms
    Description: Extract expected schema from entity definitions

✅ PASS read_actual_db_schema_mysql (mysql) - 836ms
    Description: Introspect current schema from the database

✅ PASS dry_run_support_mysql (mysql) - 1.034s
    Description: Simulate migrations without executing SQL

✅ PASS operation_planning_mysql (mysql) - 308ms
    Description: Generate detailed plan of operations

✅ PASS schema_diff_mysql (mysql) - 1.189s
    Description: Compare DB schema with entity definitions

✅ PASS failure_diagnostics_mysql (mysql) - 468ms
    Description: Simulate a failing migration and capture error

✅ PASS idempotency_reapply_mysql (mysql) - 946ms
    Description: Re-apply already applied migrations

✅ PASS idempotency_up_to_date_mysql (mysql) - 944ms
    Description: Run migrate up when database is already up-to-date

✅ PASS concurrency_parallel_migrate_mysql (mysql) - 1.05s
    Description: Launch two migrate up processes in parallel

✅ PASS partial_failure_recovery_mysql (mysql) - 763ms
    Description: Handle multi-step migration with intentional failure

✅ PASS timestamp_verification_mysql (mysql) - 892ms
    Description: Check that applied_at timestamps are stored correctly

✅ PASS manual_patch_detection_mysql (mysql) - 1.301s
    Description: Detect manual schema changes via schema diff

✅ PASS permission_restrictions_mysql (mysql) - 310ms
    Description: Test with read-only privileges

✅ PASS migration_generator_validation_mysql (mysql) - 4.731s
    Description: Validate migration generator with forward and rollback migrations

✅ PASS cleanup_support_mysql (mysql) - 1.977s
    Description: Test drop and re-run from empty state

✅ PASS dynamic_basic_evolution_mysql (mysql) - 10.756s
    Description: Test basic schema evolution using versioned entities: 000 → 013 (all versions)

✅ PASS dynamic_skip_versions_mysql (mysql) - 2.237s
    Description: Test non-sequential migration: 000 → 002 → 003

✅ PASS dynamic_idempotency_mysql (mysql) - 533ms
    Description: Test applying the same version multiple times

✅ PASS dynamic_partial_apply_mysql (mysql) - 3.651s
    Description: Test applying to specific version, then continuing

✅ PASS dynamic_schema_diff_mysql (mysql) - 747ms
    Description: Test schema diff generation between versions

✅ PASS dynamic_migration_sql_generation_mysql (mysql) - 163ms
    Description: Test SQL migration generation from entity changes

✅ PASS dynamic_rollback_single_mysql (mysql) - 1.05s
    Description: Test rolling back one version (003 → 002)

✅ PASS dynamic_rollback_multiple_mysql (mysql) - 2.684s
    Description: Test rolling back multiple versions (005 → 001)

✅ PASS dynamic_rollback_to_zero_mysql (mysql) - 1.312s
    Description: Test complete rollback to empty database

✅ PASS dynamic_partial_failure_recovery_mysql (mysql) - 1.611s
    Description: Test recovery from migration failure mid-way

✅ PASS dynamic_invalid_migration_mysql (mysql) - 549ms
    Description: Test handling of invalid/corrupted migration data

✅ PASS dynamic_concurrent_migrations_mysql (mysql) - 627ms
    Description: Test concurrent migration attempts (locking behavior)

✅ PASS dynamic_circular_dependencies_mysql (mysql) - 1.397s
    Description: Test handling of circular foreign key dependencies

✅ PASS dynamic_data_migration_mysql (mysql) - 601ms
    Description: Test migrations that require data transformation

✅ PASS dynamic_large_table_migration_mysql (mysql) - 1.047s
    Description: Test performance with large datasets during migration

✅ PASS dynamic_empty_migrations_mysql (mysql) - 459ms
    Description: Test versions with no actual schema changes

✅ PASS dynamic_duplicate_names_mysql (mysql) - 408ms
    Description: Test handling of duplicate table/field names across versions

✅ PASS dynamic_reserved_keywords_mysql (mysql) - 354ms
    Description: Test migrations involving SQL reserved keywords

✅ PASS dynamic_dialect_differences_mysql (mysql) - 245ms
    Description: Test same migration across PostgreSQL/MySQL/MariaDB

✅ PASS dynamic_type_mapping_mysql (mysql) - 561ms
    Description: Test database-specific type conversions

✅ PASS dynamic_constraint_validation_mysql (mysql) - 380ms
    Description: Test constraint violations during migration

✅ PASS dynamic_foreign_key_cascade_mysql (mysql) - 752ms
    Description: Test cascading effects of table/field drops

✅ PASS dynamic_embedded_fields_mysql (mysql) - 944ms
    Description: Test embedded struct fields (both value and pointer types) in CREATE TABLE migrations

✅ PASS dynamic_rls_functions_basic_mysql (mysql) - 347ms
    Description: Test PostgreSQL RLS and custom functions: basic multi-tenant setup

✅ PASS dynamic_rls_functions_advanced_mysql (mysql) - 8ms
    Description: Test PostgreSQL RLS and custom functions: advanced role-based policies

❌ FAIL dynamic_rls_cross_database_mysql (mysql) - 426ms
    Description: Test PostgreSQL RLS features are skipped gracefully on MySQL/MariaDB
    Error: should still generate table creation statements for MySQL/MariaDB

✅ PASS dynamic_functions_modification_mysql (mysql) - 146ms
    Description: Test PostgreSQL function modification and schema diffing

✅ PASS dynamic_rls_policy_modification_mysql (mysql) - 7ms
    Description: Test RLS policy modification and schema diffing

✅ PASS apply_incremental_migrations_mariadb (mariadb) - 529ms
    Description: Apply multiple sequential migrations to a fresh database

✅ PASS rollback_migrations_mariadb (mariadb) - 658ms
    Description: Roll back migrations in reverse order

✅ PASS upgrade_to_specific_version_mariadb (mariadb) - 401ms
    Description: Apply migrations up to a defined version

✅ PASS check_current_version_mariadb (mariadb) - 290ms
    Description: Query current migration version

✅ PASS generate_desired_schema_mariadb (mariadb) - 387ms
    Description: Extract expected schema from entity definitions

✅ PASS read_actual_db_schema_mariadb (mariadb) - 736ms
    Description: Introspect current schema from the database

✅ PASS dry_run_support_mariadb (mariadb) - 920ms
    Description: Simulate migrations without executing SQL

✅ PASS operation_planning_mariadb (mariadb) - 225ms
    Description: Generate detailed plan of operations

✅ PASS schema_diff_mariadb (mariadb) - 1.087s
    Description: Compare DB schema with entity definitions

✅ PASS failure_diagnostics_mariadb (mariadb) - 278ms
    Description: Simulate a failing migration and capture error

✅ PASS idempotency_reapply_mariadb (mariadb) - 576ms
    Description: Re-apply already applied migrations

✅ PASS idempotency_up_to_date_mariadb (mariadb) - 556ms
    Description: Run migrate up when database is already up-to-date

✅ PASS concurrency_parallel_migrate_mariadb (mariadb) - 481ms
    Description: Launch two migrate up processes in parallel

✅ PASS partial_failure_recovery_mariadb (mariadb) - 380ms
    Description: Handle multi-step migration with intentional failure

✅ PASS timestamp_verification_mariadb (mariadb) - 489ms
    Description: Check that applied_at timestamps are stored correctly

✅ PASS manual_patch_detection_mariadb (mariadb) - 548ms
    Description: Detect manual schema changes via schema diff

✅ PASS permission_restrictions_mariadb (mariadb) - 62ms
    Description: Test with read-only privileges

✅ PASS migration_generator_validation_mariadb (mariadb) - 1.398s
    Description: Validate migration generator with forward and rollback migrations

✅ PASS cleanup_support_mariadb (mariadb) - 929ms
    Description: Test drop and re-run from empty state

✅ PASS dynamic_basic_evolution_mariadb (mariadb) - 3.111s
    Description: Test basic schema evolution using versioned entities: 000 → 013 (all versions)

✅ PASS dynamic_skip_versions_mariadb (mariadb) - 720ms
    Description: Test non-sequential migration: 000 → 002 → 003

✅ PASS dynamic_idempotency_mariadb (mariadb) - 247ms
    Description: Test applying the same version multiple times

✅ PASS dynamic_partial_apply_mariadb (mariadb) - 1.021s
    Description: Test applying to specific version, then continuing

✅ PASS dynamic_schema_diff_mariadb (mariadb) - 263ms
    Description: Test schema diff generation between versions

✅ PASS dynamic_migration_sql_generation_mariadb (mariadb) - 110ms
    Description: Test SQL migration generation from entity changes

✅ PASS dynamic_rollback_single_mariadb (mariadb) - 292ms
    Description: Test rolling back one version (003 → 002)

✅ PASS dynamic_rollback_multiple_mariadb (mariadb) - 779ms
    Description: Test rolling back multiple versions (005 → 001)

✅ PASS dynamic_rollback_to_zero_mariadb (mariadb) - 402ms
    Description: Test complete rollback to empty database

✅ PASS dynamic_partial_failure_recovery_mariadb (mariadb) - 482ms
    Description: Test recovery from migration failure mid-way

✅ PASS dynamic_invalid_migration_mariadb (mariadb) - 211ms
    Description: Test handling of invalid/corrupted migration data

✅ PASS dynamic_concurrent_migrations_mariadb (mariadb) - 243ms
    Description: Test concurrent migration attempts (locking behavior)

✅ PASS dynamic_circular_dependencies_mariadb (mariadb) - 339ms
    Description: Test handling of circular foreign key dependencies

✅ PASS dynamic_data_migration_mariadb (mariadb) - 267ms
    Description: Test migrations that require data transformation

✅ PASS dynamic_large_table_migration_mariadb (mariadb) - 551ms
    Description: Test performance with large datasets during migration

✅ PASS dynamic_empty_migrations_mariadb (mariadb) - 301ms
    Description: Test versions with no actual schema changes

✅ PASS dynamic_duplicate_names_mariadb (mariadb) - 116ms
    Description: Test handling of duplicate table/field names across versions

✅ PASS dynamic_reserved_keywords_mariadb (mariadb) - 199ms
    Description: Test migrations involving SQL reserved keywords

✅ PASS dynamic_dialect_differences_mariadb (mariadb) - 104ms
    Description: Test same migration across PostgreSQL/MySQL/MariaDB

✅ PASS dynamic_type_mapping_mariadb (mariadb) - 162ms
    Description: Test database-specific type conversions

✅ PASS dynamic_constraint_validation_mariadb (mariadb) - 173ms
    Description: Test constraint violations during migration

✅ PASS dynamic_foreign_key_cascade_mariadb (mariadb) - 275ms
    Description: Test cascading effects of table/field drops

✅ PASS dynamic_embedded_fields_mariadb (mariadb) - 377ms
    Description: Test embedded struct fields (both value and pointer types) in CREATE TABLE migrations

✅ PASS dynamic_rls_functions_basic_mariadb (mariadb) - 141ms
    Description: Test PostgreSQL RLS and custom functions: basic multi-tenant setup

✅ PASS dynamic_rls_functions_advanced_mariadb (mariadb) - 6ms
    Description: Test PostgreSQL RLS and custom functions: advanced role-based policies

❌ FAIL dynamic_rls_cross_database_mariadb (mariadb) - 154ms
    Description: Test PostgreSQL RLS features are skipped gracefully on MySQL/MariaDB
    Error: should still generate table creation statements for MySQL/MariaDB

✅ PASS dynamic_functions_modification_mariadb (mariadb) - 80ms
    Description: Test PostgreSQL function modification and schema diffing

✅ PASS dynamic_rls_policy_modification_mariadb (mariadb) - 6ms
    Description: Test RLS policy modification and schema diffing

FAILED TESTS SUMMARY
--------------------
❌ dynamic_rls_functions_basic_postgres (postgres)
   Error: failed to migrate to 014-rls-functions: failed to apply migration 1: failed to execute SQL statement: pq: syntax error at or near "FOREIGN"
SQL: CREATE TABLE products (
  name VARCHAR(255) NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  created_at TIMESTAMP,
  id SERIAL PRIMARY KEY NOT NULL,
  tenant_id TEXT NOT NULL,
  description TEXT,
  user_id INTEGER NOT NULL,
  CONSTRAINT  FOREIGN KEY (user_id) REFERENCES users(id)
)

❌ dynamic_rls_functions_advanced_postgres (postgres)
   Error: failed to migrate to 015-rls-advanced: failed to apply migration 1: failed to execute SQL statement: pq: syntax error at or near "FOREIGN"
SQL: CREATE TABLE products (
  description TEXT,
  user_id INTEGER NOT NULL,
  created_at TIMESTAMP,
  tenant_id TEXT NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  status VARCHAR(20) NOT NULL DEFAULT 'active',
  updated_at TIMESTAMP,
  id SERIAL PRIMARY KEY NOT NULL,
  name VARCHAR(255) NOT NULL,
  CONSTRAINT  FOREIGN KEY (user_id) REFERENCES users(id)
)

❌ dynamic_rls_cross_database_postgres (postgres)
   Error: failed to migrate to 014-rls-functions: failed to apply migration 1: failed to execute SQL statement: pq: syntax error at or near "FOREIGN"
SQL: CREATE TABLE products (
  name VARCHAR(255) NOT NULL,
  description TEXT,
  price DECIMAL(10,2) NOT NULL,
  user_id INTEGER NOT NULL,
  created_at TIMESTAMP,
  id SERIAL PRIMARY KEY NOT NULL,
  tenant_id TEXT NOT NULL,
  CONSTRAINT  FOREIGN KEY (user_id) REFERENCES users(id)
)

❌ dynamic_functions_modification_postgres (postgres)
   Error: failed to apply migration 1: failed to execute SQL statement: pq: syntax error at or near "FOREIGN"
SQL: CREATE TABLE products (
  tenant_id TEXT NOT NULL,
  name VARCHAR(255) NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  created_at TIMESTAMP,
  id SERIAL PRIMARY KEY NOT NULL,
  description TEXT,
  user_id INTEGER NOT NULL,
  CONSTRAINT  FOREIGN KEY (user_id) REFERENCES users(id)
)

❌ dynamic_rls_policy_modification_postgres (postgres)
   Error: failed to apply migration 1: failed to execute SQL statement: pq: syntax error at or near "FOREIGN"
SQL: CREATE TABLE products (
  id SERIAL PRIMARY KEY NOT NULL,
  tenant_id TEXT NOT NULL,
  description TEXT,
  price DECIMAL(10,2) NOT NULL,
  user_id INTEGER NOT NULL,
  created_at TIMESTAMP,
  name VARCHAR(255) NOT NULL,
  CONSTRAINT  FOREIGN KEY (user_id) REFERENCES users(id)
)

❌ dynamic_rls_cross_database_mysql (mysql)
   Error: should still generate table creation statements for MySQL/MariaDB

❌ dynamic_rls_cross_database_mariadb (mariadb)
   Error: should still generate table creation statements for MySQL/MariaDB

